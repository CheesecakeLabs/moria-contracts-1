#!/bin/bash

# [From https://github.com/RenatGilmanov/shell-script-template]
# ------------------------------------------------------------------
# [Author] James Cunningham
#          governance project environment commands
# ------------------------------------------------------------------

# Work in the parent directory
# cd "$(dirname "$0")/.."

SUBJECT=moria
VERSION=0.1.0
USAGE="Usage: moria -hv args"

# --- Option processing --------------------------------------------
while getopts ":vh" optname
do
    case "$optname" in
        "v")
            echo "Version $VERSION"
            exit 0;
            ;;
        "h")
            echo $USAGE
            exit 0;
            ;;
        "?")
            echo "Unknown option $OPTARG"
            exit 0;
            ;;
        ":")
            echo "No argument value for option $OPTARG"
            exit 0;
            ;;
        *)
            echo "Unknown error while processing options"
            exit 0;
            ;;
    esac
done

shift $(($OPTIND - 1))

cmd=$1
param=$2
command="command_$1"

# -----------------------------------------------------------------
LOCK_FILE=/tmp/${SUBJECT}.lock

if [ -f "$LOCK_FILE" ]; then
    echo "Script is already running"
    exit
fi

# -----------------------------------------------------------------
trap "rm -f $LOCK_FILE" EXIT
touch $LOCK_FILE 

# -----------------------------------------------------------------

# define some colors to use for output
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

source ./bin/functions.sh

function command_hack {
    printf "${GREEN}Ok, let's see what we can see...${NC}\n"
    
    # catch unexpected failures, do cleanup and output an error message
    trap 'cleanup-dev ; printf "${RED}docker-compose Failed For Unexpected Reasons${NC}\n"'\
         HUP INT QUIT PIPE TERM

    hack
    
    if [ $? -ne 0 ] ; then
        printf "${RED}Docker Compose Failed${NC}\n"
        exit -1
    fi

    printf "${GREEN}...everybody online and looking good.${NC}\n"

}

function command_test {   
    # catch unexpected failures, do cleanup and output an error message
    trap 'cleanup-test ; printf "${RED}Tests Failed For Unexpected Reasons${NC}\n"'\
         HUP INT QUIT PIPE TERM

    test
    if [ $? -ne 0 ] ; then
        printf "${RED}Docker Compose Failed${NC}\n"
        exit -1
    fi
    # wait for the test service to complete and grab the exit code
    TEST_EXIT_CODE=`docker wait moriatests_testbox_1`
    # output the logs for the test (for clarity)
    docker logs  moriatests_testbox_1
    # inspect the output of the test and display respective message
    if [ -z ${TEST_EXIT_CODE+x} ] || [ "$TEST_EXIT_CODE" -ne 0 ] ; then
        printf "${RED}Tests Failed${NC} - Exit Code: $TEST_EXIT_CODE\n"
    else
        printf "${GREEN}Tests Passed${NC}\n"
    fi
    # call the cleanup fuction
    cleanup-test
    # exit the script with the same code as the test service code
    exit $TEST_EXIT_CODE
}

function command_down {
    printf "${GREEN}Killing docker instances${NC}\n"
    cleanup-dev;
    printf "${GREEN}Dev down${NC}\n"
    cleanup-test; 
    printf "${GREEN}Test down${NC}\n"
    printf "${GREEN}It's too bad she won't live, but then again who does?${NC}"
}


function command_build {
    printf "${GREEN}Rebuilding docker instances${NC}\n"
    build;
    printf "${GREEN}Done${NC}\n"
}

# -----------------------------------------------------------------
# -----------------------------------------------------------------
if [ -n "$(type -t ${command})" ] && [ "$(type -t ${command})" = function ]; then 
    ${command}
else 
    echo "'${cmd}' is NOT a command"; 
fi

